[
  {
    "href": "pdfs-and-latex.html#installing-tex",
    "title": "PDFs and LaTeX",
    "section": "Installing TeX",
    "text": "To install TinyTeX, use the following command:\n$ quarto install tinytex\nIf you prefer TeX Live, you can find instructions for installing it here: https://tug.org/texlive/.\nNote that Quarto’s automatic installation of missing TeX packages will work for TinyTeX and TeX Live, but not for other TeX distributions (as it relies on TeX Live’s tlmgr command)."
  },
  {
    "href": "pdfs-and-latex.html#latex-packages",
    "title": "PDFs and LaTeX",
    "section": "LaTeX Packages",
    "text": "When creating a PDF document, Pandoc allows the use of raw LaTeX directives intermixed with markdown. In some cases this LaTeX will require additional LaTeX packages. To add these packages to your document, use the header-includes YAML option. For example:\ntitle: \"My Document\"\nformat:\n  pdf:\n    header-includes: |\n      \\usepackage{fontawesome}\n      \\usepackage{sansmath}\nNote the use of the | character on the line with header-includes to indicate that the value is a multi-line string.\nIf you don’t already have these packages installed locally, then Quarto will automatically install them during rendering of the document."
  },
  {
    "href": "pdfs-and-latex.html#quarto-pdf-engine",
    "title": "PDFs and LaTeX",
    "section": "Quarto PDF Engine",
    "text": "Quarto’s built-in PDF compilation engine handles running LaTeX multiple times to resolve index and bibliography entries, and also performs automatic LaTeX package installation. This section describes customizing the built-in engine (see the Alternate PDF Engines section below for docs on using other engines).\n\nPDF Compilation\nThe following options are available for customizing PDF compilation:\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\nlatex-min-runs\nNumber (minimum number of compilation passes)\n\n\nlatex-max-runs\nNumber (maximum number of compilation passes)\n\n\nlatex-clean\nBoolean (clean intermediates after compilation, defaults to true)\n\n\nlatex-output-dir\nString (output directory for intermediates and PDF)\n\n\nlatex-makeindex\nString (program to use for makeindex)\n\n\nlatex-makeindex-opts\nArray (options for makeindexprogram)\n\n\n\n\n\nPackage Installation\nThe following options are available for customizing automatic package installation:\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\nlatex-auto-install\nBoolean (enable/disable automatic package installation)\n\n\nlatex-tlmgr-opts\nArray (options for tlmgr)"
  },
  {
    "href": "pdfs-and-latex.html#alternate-pdf-engines",
    "title": "PDFs and LaTeX",
    "section": "Alternate PDF Engines",
    "text": "To disable Quarto’s built in PDF engine, set the latex-auto-mk option to false:\ntitle: \"My Document\"\nlatex-auto-mk: false\nThe above configuration will result in Pandoc’s default behavior for PDF compilation (pdf-engine: pdflatex ). You can then use the pdf-engine and pdf-engine-opts to further customize Pandoc compilation. For example:\ntitle: \"My Document\"\nlatex-auto-mk: false\npdf-engine: xelatex\npdf-engine-opt: -outdir=out"
  },
  {
    "href": "basic-usage.html#rendering-documents",
    "title": "Basic Usage",
    "section": "Rendering Documents",
    "text": "You can use the quarto render command to render HTML, PDF, Word and many other output formats from plain markdown, Rmd documents, Jupyter Markdown (a pure markdown representation of a notebook), or a Jupyter Notebook:\n$ quarto render document.md\n$ quarto render document.Rmd\n$ quarto render jupyter.md\n$ quarto render jupyter.ipynb\nBy default, Quarto renders to HTML, however any of Pandoc’s over 40 output formats are supported. For example:\n$ quarto render document.Rmd --to pdf\n$ quarto render document.ipynb --to docx\nPandoc supports a wide variety of command line options and all of these options are supported by quarto render. For example:\n$ quarto render document.ipynb --to pdf --toc --number-sections"
  },
  {
    "href": "basic-usage.html#yaml-options",
    "title": "Basic Usage",
    "section": "YAML Options",
    "text": "Note that while it is possible to pass many options via the command line, it’s often much more convenient to provide these options within the document itself as YAML front matter. For example:\n---\ntitle: \"My Document\"\nauthor: \"Jane Doe\"\nformat: pdf\ntoc: true\nnumber-sections: true\n---\nIf you do this then the following command is equivalent to the previous example (but no options are provided on the command line b/c they are already defined in YAML):\n$ quarto render document.md\nOptions may include any of the defined Pandoc metadata variables or defaults. For example, here we take advantage of quite a few more options for PDF generation:\n---\ntitle: \"My Document\"\nauthor: \"Jane Doe\"\nformat: pdf\ntoc: true\nnumber-sections: true\nshift-heading-level-by: 1\ndocumentclass: report\ngeometry:\n  - top=30mm\n  - left=20mm\n  - heightrounded\nlinks-as-notes: true\nhighlight-style: pygments\n---"
  },
  {
    "href": "basic-usage.html#multiple-formats",
    "title": "Basic Usage",
    "section": "Multiple Formats",
    "text": "The above example includes a simple format: pdf value to set the default format. It’s also possible to provide multiple formats along with YAML options set on a per-format basis. For example, this document defines HTML, PDF, and Word output:\n---\ntitle: \"My Document\"\nauthor: \"Jane Doe\"\ntoc: true\ntoc-depth: 2\nformat:\n  html:\n    max-width: 800px\n    fontsize: 18px\n    html-math-method: katex\n  pdf:\n    documentclass: report\n    margin-left: 30mm\n    margin-right: 30mm\n  docx:\n    number-sections: true\n    reference-docx: mytemplate.docx\n---\nNote that the toc and toc-depth options are shared across all formats, and the options listed below html, pdf, and docx are only applied to their respective formats.\nIf you render this document without a --to argument, it will be rendered as html since that is the first format listed in the file. To render as another format just provide an explicit --to argument:\n$ quarto render document.md # will render to html\n$ quarto render document.md --to pdf\n$ quarto render document.md --to docx\nYou can learn about the available options for each format in the Pandoc documentation on metadata variables and defaults.\nNote that you can share format options across a set of documents using Quarto Projects."
  },
  {
    "href": "basic-usage.html#next-steps",
    "title": "Basic Usage",
    "section": "Next Steps",
    "text": "If you are a Python or Julia user, read the article on Jupyter Markdown to learn how to use Quarto with Jupyter.\nIf you are an R user, read the Rendering Rmds article to learn how to render Rmd documents with Quarto.\nIf you are creating web content with Quarto, see the article on HTML Themes to learn how to customize the appearance of your documents.\nTo learn about advanced features of Quarto see the articles on Cross References, Figures and Layout, & PDFs and LaTeX."
  },
  {
    "href": "formats/html_document.html#usage",
    "title": "HTML document",
    "section": "Usage",
    "text": "To use the HTML document format without options, add the format key to your YAML and choose html.\n\n\n\n\n\nYAML\n\n\n\n\nCommand line\n\n\n\n\n\n---\nformat: html\n---\n\n\n$ quarto render doc.md --to html"
  },
  {
    "href": "formats/html_document.html#usage-with-options",
    "title": "HTML document",
    "section": "Usage with options",
    "text": "To use the HTML document format with options, list each option on separate lines nested under the format key.\nAll options available are described in the sections below, and summarized here.\n\n\n\n\n\nYAML\n\n\n\n\nCommand line\n\n\n\n\n\n---\nformat:\n  html:\n    toc: true\n---\n\n\n$ quarto render doc.md --to html --toc"
  },
  {
    "href": "formats/html_document.html#customize-style",
    "title": "HTML document",
    "section": "Customize style",
    "text": "The Quarto HTML document format can be customized using one or several options, depending on how much and how quickly you want to customize your output. The quickest way is to use a built-in theme that bundles fonts and color palettes for you, without writing CSS yourself. Themes can also be fine-tuned with CSS custom properties, but you may also supply your own CSS to fully customize your output.\n\nThemes\n\n\nQuarto includes a set of 20 built-in themes that bundle fonts and color palettes together, without the need to know or write CSS.\n\n\n\n\n\n\n\n\nTo use the theme options, add the theme key to your YAML and select a theme by name: <splat all 20 names here>\n\n\n\n\n\nYAML\n\n\n\n\nCommand line\n\n\n\n\n\n---\nformat:\n  html:\n    theme: minty\n---\n\n\n$ quarto render doc.md --to html --toc --theme minty\n\n\n\n\n\n\n\nCustom CSS properties\nIn addition to or instead of using theme, you can also fine-tune values for one or multiple CSS properties to further customize the appearance of your HTML document. These variables will override those present in the theme, when combined with a theme.\n(https://getbootstrap.com/docs/5.0/customize/overview/)\n\n\nTo use custom CSS properties, add the name of the property to your YAML and set the value.\nUse the table below to find all property names and valid values for each property.\n\n\n\n\n\nYAML\n\n\n\n\nCommand line\n\n\n\n\n\n---\nformat:\n  html:\n    max-width: 800px\n    linestretch: 1.7\n---\n\n\n$ quarto render doc.md --to html --toc --theme minty\n\n\n\n\n\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\nmax-width\nThe maximum width of the main text column. Defaults to 900px for bootstrap themes and 36em for the pandoc theme.\n\n\nmainfont\nSets the font-family property for the document.\n\n\nfontsize\nSets the base CSS font-size for the document.\n\n\nfontcolor\nSets the default text color for the document.\n\n\nlinkcolor\nSets the default text color for hyperlinks.\n\n\nmonofont\nSets the font-family property for <code> elements.\n\n\nmonobackgroundcolor\nSets the background-color property for <code> elements.\n\n\nlinestretch\nSets the CSS line-height property (affects distance between lines of text, defaults to 1.5).\n\n\nbackgroundcolor\nSets the background-color for the document.\n\n\nmargin-left, margin-right, margin-top, margin-bottom\nSets the CSS margin properties for the document body."
  },
  {
    "href": "html-themes.html#bootstrap-themes",
    "title": "HTML Themes",
    "section": "Bootstrap Themes",
    "text": "The default theme for HTML output is based on the Bootstrap CSS framework. Bootstrap includes an attractive set of core typographic elements, as well as responsive layout for mobile devices.\n\nBootswatch\nThe Bootswatch project provides a set of over 20 custom Bootstrap themes, all of which are built-in to Quarto. To use a Bootswatch theme, just add a theme option with it’s name. For example:\ntitle: \"My Document\"\nformat:\n  html:\n    theme: cosmo\nYou can see a list of all available Bootstrap themes on the Bootswatch website.\n\n\nCustom\nBootstrap themes are just CSS files that replace the default Bootstrap stylesheet. You can create your own theme or procure a third-party theme and use it with Quarto. To use custom themes, just provide the theme’s CSS file as the theme option. For example:\ntitle: \"My Document\"\nformat:\n  html:\n    theme: mytheme.min.css"
  },
  {
    "href": "html-themes.html#pandoc-theme",
    "title": "HTML Themes",
    "section": "Pandoc Theme",
    "text": "Pandoc comes with it’s own default HTML theme. You can use this theme by specifying theme: pandoc in your document options. For example:\ntitle: \"My Document\"\nformat:\n  html: \n    theme: pandoc\nYou can then customize the appearance of the document using the Theme Options described below."
  },
  {
    "href": "html-themes.html#theme-options",
    "title": "HTML Themes",
    "section": "Theme Options",
    "text": "If you are using a Bootstrap theme or the Pandoc theme, there are a set of options you can provide in document metadata to customize it’s appearance. These include:\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\nmax-width\nThe maximum width of the main text column. Defaults to 900px for bootstrap themes and 36em for the pandoc theme.\n\n\nmainfont\nSets the font-family property for the document.\n\n\nfontsize\nSets the base CSS font-size for the document.\n\n\nfontcolor\nSets the default text color for the document.\n\n\nlinkcolor\nSets the default text color for hyperlinks.\n\n\nmonofont\nSets the font-family property for <code> elements.\n\n\nmonobackgroundcolor\nSets the background-color property for <code> elements.\n\n\nlinestretch\nSets the CSS line-height property (affects distance between lines of text, defaults to 1.5).\n\n\nbackgroundcolor\nSets the background-color for the document.\n\n\nmargin-left, margin-right, margin-top, margin-bottom\nSets the CSS margin properties for the document body.\n\n\n\nFor example. here we set the maximum width to 800px and specify that we want a bit more space between lines of text:\ntitle: \"My Document\"\nformat:\n  html: \n    theme: cosmo\n    max-width: 800px\n    linestretch: 1.7\nFor further customization, you can also include one or more CSS stylesheets using the css option. For example:\ntitle: \"My Document\"\nformat:\n  html: \n    theme: cosmo\n    max-width: 800px\n    linestretch: 1.7\n    css: styles.css"
  },
  {
    "href": "html-themes.html#custom-theme",
    "title": "HTML Themes",
    "section": "Custom Theme",
    "text": "You can disable HTML theming entirely by specifying theme: null in document options. This will result in a document that uses the default browser CSS, so you’ll often want to provide your own styles in addition.\nFor example, here we disable all built-in themes and provide our own CSS:\ntitle: \"My Document\"\nformat:\n  html: \n    theme: null\n    css: styles.css"
  },
  {
    "href": "rendering-rmds.html#overview",
    "title": "Rendering Rmds",
    "section": "Overview",
    "text": "For R users, Quarto is designed to be highly compatible with existing R Markdown documents:\n\nQuarto uses Rmd as it’s native file format for R, and should generally be able to render any existing Rmd document without changes.\nQuarto uses standard knitr options to control chunk execution and output.\n\nQuarto also introduces a number of enhancements for Rmd files that are described below. Additionally, Quarto includes a comprehensive system for laying out figure panels and a built-in system for cross-references to figures, tables, equations, sections, theorems, etc."
  },
  {
    "href": "rendering-rmds.html#rendering-from-r",
    "title": "Rendering Rmds",
    "section": "Rendering from R",
    "text": "RStudio IDE\nIn RStudio v1.4 or later, documents that use format rather than output in their YAML metadata will be rendered with Quarto when executing the Knit command from the IDE.\n\n\nR Console\nYou can render from the R console using the quarto R package. To install the R package:\ninstall.packages(\"quarto\")\nThen, to render a document:\nlibrary(quarto)\nquarto_render(\"document.Rmd\")\n\n\nIntermediates\nYou can control whether to keep intermediate .md and/or .tex files using the keep-md and keep-tex options:\n---\nformat:\n  pdf:\n    toc: true\n    keep-md: true\n    keep-tex: true\n---"
  },
  {
    "href": "rendering-rmds.html#quarto-formats",
    "title": "Rendering Rmds",
    "section": "Quarto Formats",
    "text": "One important point of divergence is that Quarto uses it’s own system of output formats rather than traditional R Markdown formats. So instead of this:\n---\noutput: \n  html_document:\n    toc: true\n---\nYou write this:\n---\nformat:\n  html:\n    toc: true\n---\nWhere format is any of the over 40 Pandoc output formats. In addition, you will eventually be able to create custom output formats as Quarto Extensions."
  },
  {
    "href": "rendering-rmds.html#section",
    "title": "Rendering Rmds",
    "section": "",
    "text": ""
  },
  {
    "href": "rendering-rmds.html#options-in-yaml",
    "title": "Rendering Rmds",
    "section": "Options in YAML",
    "text": "In R Markdown documents the setup chunk is often used to set document-wide knitr and/or R options. This works perfectly well, but does have the disadvantage of being somewhat awkward to share across all documents within a project.\nIn Quarto documents, you can provide these options in YAML. For example:\n---\ntitle: \"My Document\"\nknitr:\n  opts_chunk:\n    fig.width: 6\n    fig.height: 4\nr-options:\n  width: 70\n  digits: 5\n---\nNote that these options can also be provided on a per-format basis."
  },
  {
    "href": "rendering-rmds.html#code-folding",
    "title": "Rendering Rmds",
    "section": "Code Folding",
    "text": "For HTML output, Quarto enables you to specify that code is included in the document but hidden by default using the <details> tag. For example:\n\nTo specify that all chunks within a document should use code folding, use the code-fold option:\n---\ntitle: \"My Document\"\nformat:\n  html:\n    code-fold: true\n---\nYou can also set code folding on a per-chunk basis with the fold attribute:\n```{r fold=TRUE}\nsummary(cars)\n```\nUse the code-summary option to provide a custom caption for the <details> tag:\n---\ntitle: \"My Document\"\nformat:\n  html:\n    code-fold: true\n    code-summary: \"Show the code\"\n---\nYou can provide summary text per-cell with the summary attribute:\n```{r, summary=\"Show the code\"}\nsummary(cars)\n```\nIf you want all foldable code regions to be shown by default, use code-fold: show. For example:\n---\ntitle: \"My Document\"\nformat:\n  html:\n    code-fold: show\n---\nThis can also be specified on a per-cell basis:\n```{r, fold=\"show\"}\nsummary(cars)\n```"
  },
  {
    "href": "rendering-rmds.html#cache-control",
    "title": "Rendering Rmds",
    "section": "Cache Control",
    "text": "You can use standard knitr cache attributes to cache time consuming code chunks. In addition, you can use quarto command line options (or their equivalent arguments to the quarto_render function) to control caching behavior without changing the document’s code.\nUse these command line options to force the use of caching on all chunks, disable the use of caching on all chunks, or to force a refresh of the cache even if it has not been invalidated:\n$ quarto render document.Rmd --cache \n$ quarto render document.Rmd --no-cache \n$ quarto render document.Rmd --cache-refresh \nOr from R using the quarto package:\nlibrary(quarto)\nquarto_render(\"document.Rmd\", cache = TRUE)\nquarto_render(\"document.Rmd\", cache = FALSE)\nquarto_render(\"document.Rmd\", cache_refresh = TRUE)\nYou can also specify these options within a document’s YAML metadata. The main advantage of this over the knitr setup chunk is that could specify caching for an entire project in one place. For example:\n---\nproject:\n  name: myproject\ncache: true\n---"
  },
  {
    "href": "jupyter-markdown.html#introduction",
    "title": "Jupyter Markdown",
    "section": "Introduction",
    "text": "To author dynamic Jupyter documents for Quarto, you use Jupyter Markdown, which is a pure markdown representation of a Jupyter Notebook. Markdown notebooks are easier to use with version control nand can be edited in your favorite markdown editor.\nJupyter Markdown is just standard markdown with a jupyter YAML metadata option to specify which kernel to use, and one or more code blocks to be executed:\n\nYou can render Jupyter Markdown using this command:\n$ quarto render notebook.md\nYou can also use Quarto to export conventional Jupyter Notebooks (.ipynb files). See the article on Exporting Notebooks for additional details."
  },
  {
    "href": "jupyter-markdown.html#requirements",
    "title": "Jupyter Markdown",
    "section": "Requirements",
    "text": "Before working with Jupyter Markdown, you should ensure that you have the required packages installed for your particular Jupyter kernel.\n\nPython\nIf you already have Python/Jupyter installed in your environment, then you should have everything required to render Jupyter notebooks with Python kernels.\nIf you are in a fresh environment, install the core Quarto minimal requirements (as shown below) or if you like install the full jupyter package including the notebook, qtconsole, etc.:\n# quarto minimal requirements\n$ pip install jupyter_core nbformat nbclient ipykernel\n\n# full jupyter install\n$ pip install jupyter\n\n\nJulia\nIf you are using Julia, please see the IJulia documentation on installing and using the Julia kernel.\nNote that it’s also strongly recommended that you use Revise.jl to optimize away kernel startup time. See the documentation on using Revise within Jupyter for additional details."
  },
  {
    "href": "jupyter-markdown.html#rendering",
    "title": "Jupyter Markdown",
    "section": "Rendering",
    "text": "You can use Quarto to convert Jupyter Markdown to HTML, PDF, Word, or any of the over 40 Pandoc output formats. To render a document, just provide it as an argument to quarto render:\n$ quarto render notebook.md # will render to html\n$ quarto render notebook.md --to pdf\n$ quarto render notebook.md --to docx\nDuring rendering your Jupyter Markdown file will be converted into a notebook file (.ipynb) and then executed using the Jupyter kernel. By default, this file is considered temporary and removed after render. If you wish to keep it, specify the keep-ipynb option:\n---\ntitle: \"My document\"\nkeep-ipynb: true\njupyter: python3\"\n---\nSee the Basic Usage article for details on how to specify Pandoc output format options.\nSee the Jupyter Options article to learn how to set options for:\n\nWhether code is hidden, shown, or folded.\nHow to treat warnings and errors in output.\nSpecifying the size, alignment, and captions for figures.\nDeclaring render-time notebook parameters\nWhether intermediate files (e.g. .md, .tex, and .ipynb) are preserved."
  },
  {
    "href": "jupyter-markdown.html#jupyter-cache",
    "title": "Jupyter Markdown",
    "section": "Jupyter Cache",
    "text": "If cells are time-consuming to render, you can speed things up by using Jupyter Cache. To do this, first install the jupyter-cache package:\n$ pip install jupyter-cache\nThen, add the cache YAML metadata option:\n\nThe cache will be used whenever the content for the notebook’s code cells remains the same.\nYou can do a render without the cache or force re-population of the cache using command line arguments:\n$ quarto render notebook.md --no-cache\n$ quarto render notebook.md --refresh-cache"
  },
  {
    "href": "jupyter-markdown.html#jupytext",
    "title": "Jupyter Markdown",
    "section": "Jupytext",
    "text": "Jupytext enables you to have multiple synchronized representations of a notebook (e.g. .ipynb and .md). To learn more about using Jupytext see the project documentation.\nIf you render a document that has Jupytext synchronization enabled, Quarto will automatically call jupytext —-sync as required. For example:\n$ quarto render notebook.md\n[jupytext] Syncing ipynb,md...Done\n\nExecuting 'notebook.ipynb'\n  Cell 1/2...Done\n  Cell 2/2...Done"
  },
  {
    "href": "jupyter-markdown.html#learning-more",
    "title": "Jupyter Markdown",
    "section": "Learning More",
    "text": "See the Basic Usage article for details on how to specify Pandoc output format options.\nSee the Jupyter Options article to learn how to customize rendering output (figures, visibility of code, etc.) and kernel execution.\nYou can also use Quarto to export conventional Jupyter Notebooks (.ipynb files). See the article on Exporting Notebooks for additional details."
  },
  {
    "href": "exporting-notebooks.html#overview",
    "title": "Exporting Notebooks",
    "section": "Overview",
    "text": "If you have an existing Jupyter Notebook (.ipynb file) that you want to export to one of the formats supported by Pandoc, you can do this using quarto render. For example:\n$ quarto render notebook.ipynb # html by default\n$ quarto render notebook.ipynb --to pdf\n$ quarto render notebook.ipynb --to docx\nBy default, Quarto will not re-execute the code cells in the notebook. If you want to execute code cells during render, specify the --execute flag. For example:\n$ quarto render notebook.ipynb --execute"
  },
  {
    "href": "exporting-notebooks.html#export-options",
    "title": "Exporting Notebooks",
    "section": "Export Options",
    "text": "There are dozens of options that you can use to customize exported output. You can specify these options by adding a raw YAML block at the top of your notebook:\n\nAlternatively, you can keep these options in a separate YAML file and reference this file using the --metadata-file command line argument. For example:\n$ quarto render notebook.ipynb --metadata-file options.yml\nSee the Basic Usage article to learn more about the various metadata options that can be used to customize output."
  },
  {
    "href": "jupyter-options.html#overview",
    "title": "Jupyter Options",
    "section": "Overview",
    "text": "This article describes how to specify options that control a wide variety of rendering behaviors, including:\n\nWhether code is hidden, shown, or folded.\nHow to treat warnings and errors in output.\nSpecifying the size, alignment, and captions for figures.\nDeclaring render-time notebook parameters\nWhether intermediate files (e.g. .md, .tex, and .ipynb) are preserved.\n\nMost options can be specified at the document level or the cell level."
  },
  {
    "href": "jupyter-options.html#cell-output",
    "title": "Jupyter Options",
    "section": "Cell Output",
    "text": "There are a number of tags available that control the display of cells in rendered documents:\n\n\n\nOptions\nDescription\n\n\n\n\nshow-code hide-code\nShow or hide cell code\n\n\nshow-output hide-output\nShow or hide cell output\n\n\nshow-warnings hide-warnings\nShow or hide warnings / stderr\n\n\nhide-cell\nHide cell entirely (all code and output)\n\n\n\nThese can all be set on document or per-cell level. For example, to hide all code and warnings at a document level:\n---\ntitle: \"My document\"\nhide-code: true\nhide-warnings: true\njupyter: python3\"\n---\nTo hide code and warnings for an individual cell:\n```python tags=[\"hide-code\", \"hide-warnings\"]\nimport pandas as pd\nd = {'one' : [1., 2., 3., 4.],\n     'two' : [4., 3., 2., 1.]}\ndf = pd.DataFrame(d)\ndf\n```"
  },
  {
    "href": "jupyter-options.html#code-folding",
    "title": "Jupyter Options",
    "section": "Code Folding",
    "text": "For HTML output, Quarto enables you to specify that code is included in the document but hidden by default using the <details> tag. For example:\n\nTo specify that all cells within a document should use code folding, use the code-fold option:\n---\ntitle: \"My Document\"\nformat:\n  html:\n    code-fold: true\njupyter: python3\n---\nYou can also set code folding on a per-cell basis with the fold attribute:\n```python fold=true\nimport pandas as pd\nd = {'one' : [1., 2., 3., 4.],\n     'two' : [4., 3., 2., 1.]}\ndf = pd.DataFrame(d)\ndf\n```\nUse the code-summary option to provide a custom caption for the <details> tag:\n---\ntitle: \"My Document\"\nformat:\n  html:\n    code-fold: true\n    code-summary: \"Show the code\"\njupyter: python3\n---\nYou can provide summary text per-cell with the summary attribute:\n```python summary=\"Show the code\" \n1 + 1\n```\nIf you want all foldable code regions to be shown by default, use code-fold: show. For example:\n---\ntitle: \"My Document\"\nformat:\n  html:\n    code-fold: show\njupyter: python3\n---\nThis can also be specified on a per-cell basis:\n```python fold=\"show\" \n1 + 1\n```"
  },
  {
    "href": "jupyter-options.html#allowing-errors",
    "title": "Jupyter Options",
    "section": "Allowing Errors",
    "text": "By default, rendering terminates when a runtime error is encountered while executing a cell. In some cases however you want to actually display errors and continue (e.g. if you are writing a tutorial and want to show errors explicitly). Use the allow-errors option to continue execution after errors (and print the error message in the output):\n---\ntitle: \"My Document\"\nallow-errors: true\njupyter: python3\n---\nYou can also use the \"allow-errors\" tag to do this on a per-cell basis:\n```python tags=[\"allow-errors\"]\n1 / 0\n```"
  },
  {
    "href": "jupyter-options.html#figures",
    "title": "Jupyter Options",
    "section": "Figures",
    "text": "Format and Size\nFor each Pandoc output format (e.g. html, pdf, docx, etc.), Quarto defines an ideal figure width and height based on the typical viewport and/or physical size for that format. For example, html output defaults to 7x5 inches whereas docx output uses 5x4 inches. Presentation formats (e.g. pptx or beamer) have much larger default sizes so that figures fit themselves well to slides.\nYou can override these defaults using the fig-width and fig-height options:\n---\ntitle: \"My Document\"\nformat:\n  html: \n    fig-width: 8\n    fig-height: 3\njupyter: python3\n---\nThese defaults sizes, formats, and DPI values are automatically forwarded to selected graphics libraries:\n\nMatplotlib\nPlotly Express\n\nIf you are using another library, you can retrieve these values from the following environment variables:\n\n\n\n\n\n\n\nVariable\nDescription\n\n\n\n\nQUARTO_FIG_WIDTH\nWidth (in inches) for figures.\n\n\nQUARTO_FIG_HEIGHT\nHeight (in inches) for figures\n\n\nQUARTO_FIG_FORMAT\nPreferred output format. Valid values are “png”, “jpeg”, “svg”, and “pdf”\n\n\nQUARTO_FIG_DPI\nDots per inch (DPI) for figures. Note that it’s important to forward this value on to the graphics library so that retina (high DPI) images can be handled correctly for HTML output.\n\n\n\n\n\nFigure Captions\nIf you want your figures to appear with captions below them, use the fig.cap attribute on the code block that produces the figure:\n```python fig.cap=\"Caption\"\nimport matplotlib.pyplot as plt\nplt.plot([1,23,2,4])\nplt.show()\n```\nIf you have a code block that produces multiple figures, you can specify a list of captions:\n```python fig.cap=[\"Caption\", \"Second Caption\"]\nimport matplotlib.pyplot as plt\nplt.plot([1,23,2,4])\nplt.show()\n\nplt.plot([8,65,23,90])\nplt.show()\n```\nFigures with captions are by default center-aligned. You can change this using the fig-align attribute:\n```python fig.cap=\"Caption\" fig.align=\"left\"\nimport matplotlib.pyplot as plt\nplt.plot([1,23,2,4])\nplt.show()\n```"
  },
  {
    "href": "jupyter-options.html#intermediates",
    "title": "Jupyter Options",
    "section": "Intermediates",
    "text": "When you render Jupyter Markdown, there a number of intermediate files created. By default, these files are removed, however you can request that they be preserved using these options:\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\nkeep-md                      \nKeep the markdown that contains executed notebook output (this the markdown that is fed to Pandoc for rendering to the final output format).\n\n\nkeep-ipynb\nJupyter Notebook created by rendering the code chunks in the Jupyter Markdown file.\n\n\nkeep-tex\nKeep the intermediate TeX file generated by Pandoc (this is the TeX input that is provided to pdflatex for rendering to PDF)\n\n\n\nSpecify these options at the document level. For example:\n---\ntitle: \"My Document\"\nkeep-ipynb: true\njupyter: python3\n---"
  },
  {
    "href": "jupyter-options.html#execution",
    "title": "Jupyter Options",
    "section": "Execution",
    "text": "You might wish to prevent execution of code cells when rendering (for example, if it’s very expensive and you just want to preview markdown output). You can do this by adding execute: false as a YAML metadata option:\n---\ntitle: \"My Document\"\nexecute: false\njupyter: python3\n---\nAlternatively, you can pass the --no-execute option to the quarto render command:\n$ quarto render notebook.md --no-execute\nA better option for expensive to render documents is to use caching. See the Jupyter Cache documentation for additional details.\n\nParameters\nYou may have a set of parameters that you use to create different variations of a document. For example:\n\nShowing results for a specific geographic location.\nRunning a report that covers a specific time period.\nRunning a single analysis multiple times for different assumptions.\n\nQuarto uses the same syntax for defining parameters as Papermill. To parameterize a notebook, designate a cell with the tag parameters and provide appropriate default values:\n```python tags=[\"parameters\"]\nalpha = 0.1\nratio = 0.1\n```\nTo render using different parameters you can pass them on the command line using the -P flag:\n$ quarto render notebook.md -P alpha:0.2 -P ratio:0.3\nAlternatively you can create a YAML file that defines the parameter values you want to render with, then call quarto render with the --execute-params flag:\n$ quarto render notebook.md --execute-params params.yml\n\n\nKernel Lifetimes\nBy default, quarto render keeps the Jupyter kernel used to render a document alive for 5 minutes in case a subsequent render wants to utilize the kernel. This makes rendering much faster for subsequent runs since no kernel start-up time is required.\nYou can change this default behavior using the kernel-keepalive option. For example:\n---\ntitle: \"My Document\"\nkernel-keepalive: 60\njupyter: python3\n---\nYou can also specify this option at the command line using the --kernel-keepalive flag:\n$ quarto render notebook.md --kernel-keepalive 0\nThe above example specifies 0, which means don’t keep the kernel around at all.\nYou can force a kernel restart using the --kernel-restart flag:\n$ quarto render notebook.md --kernel-restart"
  },
  {
    "href": "index.html#installation",
    "title": "Introduction",
    "section": "Installation",
    "text": "You can install an alpha-build of the Quarto CLI (command-line interface) from here:\nhttps://github.com/quarto-dev/quarto-cli/releases/latest\nYou can verify that Quarto has been installed correctly with:\n$ quarto help\nTo install the development version of the Quarto CLI, git clone this repo then run the configure script for your platform (configure-linux.sh, configure-macos.sh, or configure-window.cmd). For example:\n$ git clone https://github.com/quarto-dev/quarto-cli\n$ cd quarto-cli\n$ ./configure-macos.sh"
  },
  {
    "href": "index.html#getting-started",
    "title": "Introduction",
    "section": "Getting Started",
    "text": "See Basic Usage to learn the core mechanics of rendering markdown from the command line as well as how to specify different document formats.\nIf you are a Python or Julia user, read the article on Jupyter Markdown to learn how to use Quarto with Jupyter.\nIf you are an R user, read the Rendering Rmds article to learn how to render Rmd documents with Quarto.\nIf you are creating web content with Quarto, see the article on HTML Themes to learn how to customize the appearance of your documents.\nAdvanced features of Quarto are covered in these articles:\n\nCross References describes how to create numbered references to figures, tables, equations, sections, listings, etc.\nFigures and Layout documents Quarto’s layout primitives for creating figure panels, side-by-side tables, etc.\nPDFs and LaTeX explains automatic TeX package installation as well as how to install and use TinyTeX.\nQuarto Projects covers how to share YAML metadata options across documents and render all of the documents in directory with a single command."
  },
  {
    "href": "quarto-projects.html#creating-projects",
    "title": "Quarto Projects",
    "section": "Creating Projects",
    "text": "Use the quarto create-project command to create a new project. If you have an existing directory of documents that you want to treat as a project just invoke create-project with no arguments from within the directory:\n$ quarto create-project\nTo create a project in a new directory just provide a directory name on the command line:\n$ quarto create-project myproject"
  },
  {
    "href": "quarto-projects.html#shared-metadata",
    "title": "Quarto Projects",
    "section": "Shared Metadata",
    "text": "When you create a project, a _quarto.yml config file is created. Here is an example of what the _quarto.yml file might look like:\nproject:\n  name: myproject\nformat:\n  html:\n    css: styles.css\n    html-math-method: katex\n  pdf:\n    documentclass: report\n    margin-left: 30mm\n    margin-right: 30mm\ntoc: true\nnumber-sections: true\nbibliography: references.bib\nAny document rendered within the project directory will automatically inherit the metadata defined at the project level."
  },
  {
    "href": "quarto-projects.html#rendering-projects",
    "title": "Quarto Projects",
    "section": "Rendering Projects",
    "text": "You can render files within a project either one-by-one or all at once (in either case, shared project metadata will be used).\nTo render all of the documents within a project, just use quarto render within the project directory (or target a specific directory with a command line argument):\n$ quarto render # render current dir\n$ quarto render myproject\nNote that when rendering an entire project, command line arguments you pass to quarto render will be used for each file in the project. For example. theses command will render each document in a project as a PDF:\n$ quarto render --to pdf\n$ quarto render myproject --to pdf\nIf you don’t want to render all of the target documents in a project, or you wish to control the order of rendering more precisely, you can add a project: render: [files] entry to your project metadata. For example:\nproject:\n  name: myproject\n  render:\n    - section1.md\n    - section2.md\nNote that you can use wildcards when defining the render list. For example:\nproject:\n  name: myproject\n  render:\n    - section*.md"
  },
  {
    "href": "quarto-projects.html#project-types",
    "title": "Quarto Projects",
    "section": "Project Types",
    "text": "The only type of project currently available is the vanilla “default” type described above. However, additional project types are under development including:\n\nA website project type that includes navigational elements and copies all output files to a deployment directory.\nA book project type that combines all of the included documents into a single manuscript.\n\nYou will also be able to define custom project types as Quarto Extensions."
  },
  {
    "href": "cross-references.html#overview",
    "title": "Cross References",
    "section": "Overview",
    "text": "To enable support for cross-references, specify crossref: true in document metadata. For example:\n---\ntitle: \"My Document\"\ncrossref: true\n---\nCross-references make it easier for readers to navigate your document by providing numbered references and hyperlinks to various entities like figures and tables. Every cross-referenceable entity requires a label (unique identifier) and caption (description). For example, this is a cross-referenceable figure:\n![Elephant](elephant.png){#fig:elephant}\nThe presence of the caption (Elephant) and label (#fig:elephant) make this figure referenceable. This enables you to use the following syntax to refer to it elsewhere in the document:\nSee @fig:elephant for an illustration.\nHere is what this would look like rendered to HTML:\n\nQuarto enables you to create cross-references to figures, tables, equations, sections, code listings, theorems, proofs, and more. Cross references can also be applied to dynamic output from knitr and Jupyter. The inline reference text (“fig. 1” in the above example) can also be customized (e.g. “figure 1” rather than the abbreviation).\nQuarto’s syntax for cross-references is based on pandoc-crossref (which is in turn based on this discussion: https://github.com/jgm/pandoc/issues/813). In addition, Quarto includes support for referencing raw HTML and LaTeX figures and tables, as well as referencing theorems and proofs."
  },
  {
    "href": "cross-references.html#figures",
    "title": "Cross References",
    "section": "Figures",
    "text": "As described above, this is the markdown used to create a cross-referenceable figure and then refer to it:\n![Elephant](elephant.png){#fig:elephant}\n\nSee @fig:elephant for an illustration.\n\nSubfigures\nYou may want to create a figure composed of multiple subfigures. To do this, enclose the figures in a div (with it’s own label and caption) and give each subfigure it’s own label and caption. You can then refer to either the entire figure in a reference or a single subfigure:\n::: {#fig:elephants layout.ncol=2}\n\n![Surus](surus.png){#fig:surus}\n\n![Hanno](hanno.png){#fig:hanno}\n\nFamous Elephants\n:::\n\nSee @fig:elephants for examples. In particular, @fig:hanno.\nHere is what this looks like when rendered as HTML:\n\nNote that we also used the layout.ncol attribute to specify a two-column layout. See the article on Figures and Layout for more details on laying out panels of figures.\n\n\nJupyter\nFigures produced by Jupyter and knitr can also be cross-referenced.\nTo reference figure output from a Jupyter code cell, add the label attribute to provide an identifier, and the fig.cap attribute to provide a caption. For example:\n```python label=\"#fig:plot\" fig.cap=\"Plot\"\nimport matplotlib.pyplot as plt\nplt.plot([1,23,2,4])\nplt.show()\n```\n\nFor example, see @fig:plot.\n\nYou can also create multiple figures within a Jupyter code cell and reference them as subfigures. To do this use fig.cap for the main caption, and fig.subcap to provide an array of subcaptions. For example:\n```python label=\"#fig:plots\" fig.cap=\"Plots\" fig.subcap=[\"Plot 1\",\"Plot 2\"] layout.ncol=2\nimport matplotlib.pyplot as plt\nplt.plot([1,23,2,4])\nplt.show()\n\nplt.plot([8,65,23,90])\nplt.show()\n```\n\nSee @fig:plots for examples. In particular, @fig:plots-2.\n\nNote that subfigure reference labels are created automatically based on the main chunk label (e.g. @fig:plots-1, @fig:plots-2, etc.).\n\n\nknitr\nTo reference figure output from a knitr code chunk, add a #fig: chunk label along with the fig.cap attribute:\n```{r #fig:plot, fig.cap=\"Plot\"}\nplot(cars)\n```\n\nFor example, see @fig:plot.\n\nYou can also create multiple figures within a knitr code chunk and reference them as subfigures. To do this use fig.cap for the main caption, and fig.subcap to provide a vector of subcaptions. For example:\n```{r #fig:plots, fig.cap=\"Plots\", fig.subcap=c(\"Plot 1\", \"Plot 2\"), layout.ncol=2}\nplot(cars)\nplot(pressure)\n```\n\nSee @fig:plots for examples. In particular, @fig:plots-2.\n```\n\nNote that subfigure reference labels are created automatically based on the main chunk label (e.g. @fig:plots-1, @fig:plots-2, etc.)."
  },
  {
    "href": "cross-references.html#tables",
    "title": "Cross References",
    "section": "Tables",
    "text": "To create a cross-referenceable table, add a caption to the table then include a #tbl: label in braces at the end of the caption. For example:\n| Col1 | Col2 | Col3 |\n|------|------|------|\n| A    | B    | C    |\n| E    | F    | G    |\n| A    | G    | G    |\n\n: My Caption {#tbl:letters}\n\nSee @tbl:letters.\n\nYou may want to create a composition of several sub-tables. To do this, create a div with a main identifier, then apply sub-identifiers within the caption of contained tables. For example:\n::: {#tbl:panel layout.ncol=2}\n| Col1 | Col2 | Col3 |\n|------|------|------|\n| A    | B    | C    |\n| E    | F    | G    |\n| A    | G    | G    |\n\n: First Table {#tbl:first}\n\n| Col1 | Col2 | Col3 |\n|------|------|------|\n| A    | B    | C    |\n| E    | F    | G    |\n| A    | G    | G    |\n\n: Second Table {#tbl:second}\n\nMain Caption\n:::\n\nSee @tbl:panel for details, especially @tbl:second.\n\nNote that the “Main Caption” for the table is provided as the last block within the containing div.\n\nJupyter and knitr\nYou can also cross-reference tables created from code executed via knitr or Jupyter. To do this, add a tbl.cap attribute and include #tbl: labels within the captions of the sub-tables. For example:\n```{r #tbl:tables, tbl.cap=\"Tables\", layout.ncol=2}\nlibrary(knitr)\nkable(head(cars), caption = \"Cars {#tbl:cars}\")\nkable(head(pressure), caption = \"Pressure {#tbl:pressure}\")\n```"
  },
  {
    "href": "cross-references.html#equations",
    "title": "Cross References",
    "section": "Equations",
    "text": "Provide an #eq: label immediately after an equation to make it referenceable. For example:\nBlack-Scholes (@eq:black-scholes) is a mathematical model that seeks to explain the behavior of financial derivatives, most commonly options:\n\n$$\n\\frac{\\partial \\mathrm C}{ \\partial \\mathrm t } + \\frac{1}{2}\\sigma^{2} \\mathrm S^{2}\n\\frac{\\partial^{2} \\mathrm C}{\\partial \\mathrm C^2}\n  + \\mathrm r \\mathrm S \\frac{\\partial \\mathrm C}{\\partial \\mathrm S}\\ =\n  \\mathrm r \\mathrm C \n$$ {#eq:black-scholes}\n\nNote that the equation number is included (via \\qquad) in the right margin of the equation."
  },
  {
    "href": "cross-references.html#sections",
    "title": "Cross References",
    "section": "Sections",
    "text": "To reference a section, add a #sec: identifier to any heading. For example:\n## Introduction {#sec:introduction}\n\nSee @sec:introduction for additional context.\nNote that when using section cross-references, you will also need to enable the number-sections option (so that section numbering is visible to readers). For example:\n---\ntitle: \"My Document\"\nnumber-sections: true\n---"
  },
  {
    "href": "cross-references.html#code-listings",
    "title": "Cross References",
    "section": "Code Listings",
    "text": "To create a referenceable code block, add a #lst: identifier along with a lst.cap attribute. For example:\n```{#lst:customers .sql lst.cap=\"Customers Query\"}\nSELECT * FROM Customers\n```\n\nThen we query the customers database (@lst:customers)."
  },
  {
    "href": "cross-references.html#theorems-and-proofs",
    "title": "Cross References",
    "section": "Theorems and Proofs",
    "text": "Theorems are commonly used in articles and books in mathematics. To include a referenceable theorem, create a div with a #thm: label (or one of other theorem-type labels described below) and name attribute. You can include any content you like within the div. For example:\n::: {#thm:line name=\"Line\"}\nThe equation of any straight line, called a linear equation, can be written as:\n\n$$\ny = mx + b\n$$\n:::\n\nSee @thm:line.\n\nFor LaTeX output, the amsthm package is used for typesetting theorems. For other formats an appropriate treatment is used (the above is an example of HTML output).\nThere are a number of theorem variations supported, each with their own label prefix:\n\n\n\nLabel Prefix\nPrinted Name\nLaTeX Environment\n\n\n\n\n#thm:\nTheorem\ntheorem\n\n\n#lem:\nLemma\nlemma\n\n\n#cor:\nCorollary\ncorollary\n\n\n#prp:\nProposition\nproposition\n\n\n#cnj:\nConjecture\nconjecture\n\n\n#def:\nDefinition\ndefinition\n\n\n#exm:\nExample\nexample\n\n\n#exr:\nExercise\nexercise"
  },
  {
    "href": "cross-references.html#references",
    "title": "Cross References",
    "section": "References",
    "text": "The examples above have all used the default syntax for inline references (e.g. @fig:elephant), which results in the use a short abbreviation for each object type (e.g. “fig. 1”, “tbl. 1”, etc.).\nYou can customize the appearance of inline references by either changing the syntax of the inline reference or by setting options. Here are the various ways to compose a cross-reference and their resulting output:\n\n\n\nType\nSyntax\nOutput\n\n\n\n\nDefault\n@fig:elephant\nfig. 1\n\n\nCapitalized\n@Fig:elephant\nFig. 1\n\n\nCustom Prefix\n[Figure @fig:elephant]\nFigure 1\n\n\nNo Prefix\n-@fig:elephant\n1\n\n\n\nYou can also group cross references using the following syntax:\nAs illustrated in [@fig:elephant; @fig:panther; @fig:rabbit].\nThere are a number of options that can be used to further customize the treatment of cross-references. See the section below on References Options for additional details."
  },
  {
    "href": "cross-references.html#chapter-numbering",
    "title": "Cross References",
    "section": "Chapter Numbering",
    "text": "You can use the crossref: chapters option to indicate that top-level headings (H1) in your document correspond to chapters, and that cross-references should be sub-numbered by chapter. For example:\n---\ntitle: \"My Document\"\nauthor: \"Jane Doe\"\ncrossref:\n  chapters: true\n---\n\n# Introduction\n\n![Elephant](elephant.png){#fig:elephant}\n\nSee @fig:elephant for an illustration."
  },
  {
    "href": "cross-references.html#lists",
    "title": "Cross References",
    "section": "Lists",
    "text": "For LaTeX / PDF output, you can use the raw LaTeX commands \\listoffigures, \\listoftables and \\listoflistings to produce listings of all figures, tables, etc. within a document. You can use the lof-title, lot-title, and lol-title crossref options to customize the title of the listing.\nFor example:\n---\ntitle: \"My Document\"\ncrossref:\n  lof-title: \"List of Figures\"\nformat: pdf\n---\n\n\\listoffigures\nNote that the default titles for the lists use the form displayed above (i.e. “List of…<Type>”)."
  },
  {
    "href": "cross-references.html#options",
    "title": "Cross References",
    "section": "Options",
    "text": "There are a wide variety of options available for customizing caption labels and references. These options are all specified within the crossref key of document metadata.\n\nTitles\nYou can specify the title prefix used for captions using *-title options. You can also specify the delimiter used between the prefix and the caption using the title-delim option. For example:\n---\ntitle: \"My Document\"\ncrossref:\n  fig-title: Fig     # (default is \"Figure\")\n  tbl-title: Tbl     # (default is \"Table\")\n  title-delim: —     # (default is \":\")\n---\n\n\nReferences\nYou can specify the prefix used for inline reference type using *-prefix options. You can also specify whether references should be hyper-linked using the ref-hyperlink option. For example:\n---\ntitle: \"My Document\"\ncrossref:\n  fig-prefix: figure   # (default is \"fig.\")\n  tbl-prefix: table    # (default is \"tbl.\")\n  ref-hyperlink: false # (default is true)\n---\n\n\nNumbering\nThere are a variety of numbering schemes available for cross-references, including:\n\narabic (1, 2, 3)\nroman (I, II, III, IV)\nroman i (i, ii, iii, iv)\nalpha x (start from letter ‘x’)\nalpha X (start from letter ‘X’)\n\nYou can specify the number scheme used for all types (other than sub-references) using the labels option. For sub-references (e.g. subfigures), you can specify the number scheme using the subref-labels option. For example:\n---\ntitle: \"My Document\"\ncrossref:\n  labels: alpha a        # (default is arabic)\n  subref-labels: roman i # (default is alpha a)\n---\nIf you would like, you can specify the number scheme for a specific type using the *-labels options. For example:\n---\ntitle: \"My Document\"\ncrossref:\n  fig-labels: alpha a    # (default is arabic)\n  tbl-labels: alpha a    # (default is arabic)\n  subref-labels: roman i # (default is alpha a)\n---\nIf both labels and a type specific label option is provided, the type specific option will override the labels option."
  },
  {
    "href": "quarto-extensions.html",
    "title": "Quarto Extensions",
    "section": "",
    "text": "This article is a placeholder for documentation on the (yet to be developed) Quarto extension system.\nOur plan is to provide facilities for creating the following extension types:\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nDocument Format                    \nNew formats derived from the built in pandoc formats. For example, PDF formats that enable creating articles using the LaTeX templates of various journals (much like the rticles suite of custom R Markdown formats)\n\n\nProject Format\nOutput formats for website or book Quarto Projects (both still under development).\n\n\nDocument Template\nPandoc templates and scaffold content for documents (e.g. to provide a common structure or look and feel across documents).\n\n\nDocument Filter\nPandoc Lua filters for low-level transformation of the Pandoc AST."
  },
  {
    "href": "figures-and-layout.html#pandoc-figures",
    "title": "Figures and Layout",
    "section": "Pandoc Figures",
    "text": "![Elephant](elephant.png)\nThis results in the following treatment for various output types:\n\n\n\nHTML\nPDF\nWord\n\n\n\n\n\n\n\n\n\n\nNote that for LaTeX / PDF output figures are automatically numbered (you can arrange for figures to be numbered in other formats using Cross References)."
  },
  {
    "href": "figures-and-layout.html#linked-figures",
    "title": "Figures and Layout",
    "section": "Linked Figures",
    "text": "When rendering with Quarto, you can enclose a figure within a link and it will still be treated within output as a captioned figure. For example:\n[![Elephant](elephant.png)](https://en.wikipedia.org/wiki/Elephant)"
  },
  {
    "href": "figures-and-layout.html#figure-alignment",
    "title": "Figures and Layout",
    "section": "Figure Alignment",
    "text": "Figures and their captions are center aligned by default. Add the fig.align attribute to the image to use a different alignment. For example:\n![Elephant](elephant.png){fig.align=\"left\"}"
  },
  {
    "href": "figures-and-layout.html#latex-environments",
    "title": "Figures and Layout",
    "section": "LaTeX Environments",
    "text": "There are a number of LaTeX packages that provide custom figure environments. For example, the mdframed package includes an mdframed environment used to enclose figures in a special border style. By default, Quarto uses the standard figure environment, but you can use the fig.env attribute to specify a custom one. For example:\n---\ntitle: \"Sidenotes\"\nformat:\n  pdf:\n    header-includes: |\n      \\usepackage{sidenotes}\n---\n\n![Elephant](elephant.png){fig.env=\"marginfigure\"}"
  },
  {
    "href": "figures-and-layout.html#figure-divs",
    "title": "Figures and Layout",
    "section": "Figure Divs",
    "text": "You can treat any markdown content you want as a figure by enclosing it in Pandoc div block with an identifier prefaced with #fig:. For example, here we create a figure that includes an embedded iframe:\n::: {#fig:elephant}\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/SNggmeilXDQ\"></iframe>\n\nElephant\n:::\nNote that the last paragraph in the div block is used as the figure caption."
  },
  {
    "href": "figures-and-layout.html#subfigures",
    "title": "Figures and Layout",
    "section": "Subfigures",
    "text": "If you have several figures that appear as a group, you can create a figure div to enclose them. For example:\n::: {#fig:elephants layout.ncol=2}\n\n![Surus](surus.png){#fig:surus}\n\n![Hanno](hanno.png){#fig:hanno}\n\nFamous Elephants\n:::\nAgain, the last paragraph provides the main caption, and the individual figures carry the sub-captions. Here is what this looks like when rendered as HTML:\n\nNote that we also used a layout.ncol attribute to specify a two-column layout. The next section delves more into customizing figure layouts."
  },
  {
    "href": "figures-and-layout.html#figure-panels",
    "title": "Figures and Layout",
    "section": "Figure Panels",
    "text": "Above we demonstrate laying out two side-by-side figures with subcaptions and a main caption. You may or may not want the caption / subcaption treatment, and you might also want to use multiple rows of figures. All of these variations are possible.\nTo layout two figures with their own standalone captions (and no main caption), just eliminate the #fig identifiers and main caption at the bottom:\n::: {layout.ncol=2}\n![Surus](surus.png)\n\n![Hanno](hanno.png)\n:::\n\nYou can also eliminate the captions entirely:\n::: {layout.ncol=2}\n![](surus.png)\n\n![](hanno.png)\n:::\n\nMultiple Rows\nIf you have more than 2 images, you might want to lay them out across multiple rows. You can do this using the layout.nrow attribute. For example:\n::: {layout.nrow=2}\n![Surus](surus.png)\n\n![Hanno](hanno.png)\n\n![Abdul Abbas](abdul-abbas.png)\n\n![Lin Wang](lin-wang.png)\n:::\n\nMore complex figure arrangements (e.g. rows with varying column layouts) are possible. See the Complex Layouts section below for more details."
  },
  {
    "href": "figures-and-layout.html#jupyter-and-knitr-figures",
    "title": "Figures and Layout",
    "section": "Jupyter and knitr Figures",
    "text": "Note that figure layout attributes also work for figures produced by knitr or Jupyter. For example, to show two plots emitted from a Jupyter code cell side-by-side you would do the following:\n```python layout.ncol=2\nimport matplotlib.pyplot as plt\nplt.plot([1,23,2,4])\nplt.show()\n\nplt.plot([8,65,23,90])\nplt.show()\n```\n\nTo show two plots emitted from a knitr code chunk side-by-side:\n```{r, layout.ncol=2}\nplot(cars)\nplot(pressure)\n```"
  },
  {
    "href": "figures-and-layout.html#table-panels",
    "title": "Figures and Layout",
    "section": "Table Panels",
    "text": "You can also use a div with layout attributes to display tables side-by-side. For example:\n::: {layout.ncol=2}\n| Col1 | Col2 | Col3 |\n|------|------|------|\n| A    | B    | C    |\n| E    | F    | G    |\n| A    | G    | G    |\n\n: First Table\n\n| Col1 | Col2 | Col3 |\n|------|------|------|\n| A    | B    | C    |\n| E    | F    | G    |\n| A    | G    | G    |\n\n: Second Table\n:::\n\nAs with figures, you can also present tables using numbered subcaptions by adding a main caption and #tbl: identifiers:\n::: {#tbl:panel layout.ncol=2}\n| Col1 | Col2 | Col3 |\n|------|------|------|\n| A    | B    | C    |\n| E    | F    | G    |\n| A    | G    | G    |\n\n: First Table {#tbl:first}\n\n| Col1 | Col2 | Col3 |\n|------|------|------|\n| A    | B    | C    |\n| E    | F    | G    |\n| A    | G    | G    |\n\n: Second Table {#tbl:second}\n\nMain Caption\n:::\n\nSee the article on Cross References for additional details on table captions, subcaptions, and numbering."
  },
  {
    "href": "figures-and-layout.html#jupyter-and-knitr-tables",
    "title": "Figures and Layout",
    "section": "Jupyter and knitr Tables",
    "text": "You can also use layout attributes for tables produced by knitr or Jupyter. For example, this Rmd code chunk creates side-by-side tables:\n```{r, layout.ncol=2}\nlibrary(knitr)\nkable(head(cars), caption = \"Cars\")\nkable(head(pressure), caption = \"Pressure\")\n```"
  },
  {
    "href": "figures-and-layout.html#complex-layouts",
    "title": "Figures and Layout",
    "section": "Complex Layouts",
    "text": "The examples above used the layout.ncol or layout.nrow attributes to create straightforward layouts where all columns are of equal sizes. The layout attribute enables the creation of much more complex layouts.\nFor example, this defines a layout with two equally sized figures in the first row, then another image that spans the entire second row:\n::: {layout=\"[[1,1], [1]]\"}\n![Surus](surus.png)\n\n![Hanno](hanno.png)\n\n![Lin Wang](lin-wang.png)\n:::\n\nThe layout attribute is a 2-dimensional array where the first dimension defines rows and the second columns. In this case \"layout=\"[[1,1], [1]]\" translates to: create two rows, the first of which has two columns of equal size and the second of which has a single column.\nNote that the numbers in a row are arbitrary and don’t need to add up to a particular total. You can therefore use whatever scheme is most natural. For example, here we define columns that occupy varying percentage widths of the row:\n::: {layout=\"[[70,30], [100]]\"}\n![Surus](surus.png)\n\n![Hanno](hanno.png)\n\n![Lin Wang](lin-wang.png)\n:::\nYou can also use negative values to create space between elements. For example:\n::: {layout=\"[[40,-20,40], [100]]\"}\n![Surus](surus.png)\n\n![Hanno](hanno.png)\n\n![Lin Wang](lin-wang.png)\n:::\n\n\nVertical Alignment\nIf you have a layout with a row of images of differing heights, you can control their vertical alignment using the layout.valign attribute. A simple example:\n::: {layout=\"[25,-2,10]\" layout.valign=\"bottom\"}\n![Surus](surus.png)\n\n![Lin Wang](lin-wang.png)\n:::\n\nNote that vertical alignment isn’t limited to images, you can also vertically align any other elements that are included in a panel."
  },
  {
    "href": "figures-and-layout.html#jupyter-and-knitr-layout",
    "title": "Figures and Layout",
    "section": "Jupyter and knitr Layout",
    "text": "The layout works the same way for figures or tables produced by knitr or Jupyter. For example, here’s an Rmd code chunk that produces 3 plots and defines a custom layout for them:\n```{r, layout=list(c(45,-10, 45), c(100))}\nplot(cars)\nplot(pressure)\nplot(mtcars)\n```\n\nNote that for Rmd code chunks, you use a list of numeric vectors (each of which represents a row). For Jupyter Markdown however you use the same array of arrays syntax (e.g layout=\"[[40,-20,40], [100]]\") as is used for plain markdown."
  },
  {
    "href": "figures-and-layout.html#block-layout",
    "title": "Figures and Layout",
    "section": "Block Layout",
    "text": "While the examples above illustrate laying out figures and tables, it’s important to note that layout attributes can be used to layout any sort of block content. For example, here we layout 2 lists side-by-side:\n::: {layout.ncol=2}\n### List One\n\n- Item A\n- Item B\n- Item C\n\n### List Two\n\n- Item X\n- Item Y\n- Item Z\n:::\nNote that headings are automatically combined with the block that follows them, so this markdown has a total of 2 columns to lay out. Here’s an example of a paragraph next to a bullet list (without headings):\n::: {layout.ncol=2}\n- Item X\n- Item Y\n- Item Z\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur gravida eu erat et fring.\nMorbi congue augue vel eros ullamcorper, eget convallis tortor sagittis. Fusce sodales viverra\nmauris a fringilla. Donec feugiat, justo eu blandit placerat, enim dui volutpat turpis, eu\ndictum lectus urna eu urna. Mauris sed massa ornare, interdum ipsum a, semper massa. \n:::"
  }
]